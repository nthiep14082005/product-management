- Git là một hệ thống quản lý phiên bản phân tán trên local tức là trên máy tính của bản thânthân
-> nó cung cấp kho lữu trữ (repository) để chứa toàn bộ lịch sử phiên bản 
-> tốc độ nhanh, đơn giản, phân tán , phù hợp với dự án lớn nhỏ
------ ví dụ
    nếu ta có 1 app và có 2 kho lưu trữ ví dụ version 1.1.12 mà ta update lên 1.1.13 mà bị lỗi thì khi này ta sẽ chuyển sang bản 1.1.12 để dùng tạm trong khi fix bản 1.1.13







+ Có 3 thuật ngữ trong git

    - working directory(vùng đang làm việc với dự án)  --- git add --> staging area(vùng chứa thông tin thay đổi của file) --- git commit --> repository(khi sửa thành phiên bản tốt nhất thì ta sẽ lưu phiên bản đó vào kho lưu trữ, lưu trữ lịch sử dữ liệu và các phiên bản)

    ----> vùng working directory tương tự như đang sửa đổi lên version 1.1.13 còn staging là version 1.1.12 
    





-- Các câu lệnh 

        - git init // khởi tạo 1 repository trống cho dự án, và chạy câu lệnh trong thư mục gốc của dự án 
        - git status // để xem trạng thái của những file đã được thay đổi trong dự án , Màu đỏ là đã sửa chưa add, Màu xanh là đã add lên 
        - git add ten-file (add 1 file) , git add . (add tất cả các file)


git config --global user.email "emailcuaban@example.com"
git config --global user.name "Ten Cua Ban"
hoặc 
git config user.email "emailcuaban@example.com"
git config user.name "Ten Cua Ban"
        + để lưu vào kho repository 
            - git commit -m "Nội dung...." // chuyển từ staging sang repository và comment nội dung đến trạng thái ta vừa sửa 
            - git log // xem lại lịch sử commit
            - git show commit_id // dùng để xem chi tiết 1 commit .
            - git diff // xem sự kiện thay đổi của một file sau khi chỉnh sửa và điều kiện là file đó vẫn đang ở khu vực working
                       // khu vực working là để cửa sổ để sửa code

            - gitk // mở dashboard để xem trực quan hơn tương tự git diff

            - git checkout -- ten_file // bỏ đi những thay đổi của file, để file đó trở về như lúc lần git add . gần nhất khi chưa thay đổi ( chỉ hoạt động khi để ở phần working )
            - git reset HEAD ten_file hoac git reset ten_file // chuyển file từ staging về lại working
            - git reset --soft commit_id // để chuyển từ trạng thái từ repository về staging, từ trạng thái đã commit về trạng thái trước chạy lệnh git commit
            - git reset --mixed commit_id // để chuyển từ trạng thái từ repository về working, từ trạng thái đã add về trạng thái trước khi chạy lệnh git add 
            







------------- NHÁNH TRONG GIT ---------------
- Các nhánh là đại diện cho các phiên bản của 1 kho lưu trữ được tách ra từ dự án chính 
    - Ví dụ có 1 thân cây là master và chúng ta chỉ nên add từ các nhánh tức là lá vào master 
    - Nhánh master là nhánh chính để sau này deploy lên server 
    


//
    - git branch // xem danh sách các nhánh
    - git checkout -b ten_nhanh // tạo một nhánh mới và chuyển sang nhánh đó 
    - git checkout ten_nhanh // chuyển sang nhánh khác
    - git merge ten_nhanh // để merge nhánh khác vào trong nhánh hiện tại 
    - git branch -D ten_nhanh // xóa nhánh
    






------------ HOC GITHUB-----------
 - là một hệ thống để quản lý dự án trực tuyến trên online để giúp đồng bộ code của cả nhóm lên một kho lưu trữ chung

 B1 : tạo new repository 
 B2 : đặt tên repository 
 B3 : để public 






-- khi đã có git thì cách đẩy code LẦN ĐẦU TIÊN 
B1 : git remote add origin https://github.com/nthiep14082005/product-management.git        // -> kết nối kho lưu trữ project từ dưới local với online trên github
B2 : git branch -M main    // -> đổi tên từ master thành main -> do github ko đặt nhánh chính là master mà đặt tên là main
B3 : git push -u origin main   // -> đẩy code lên main

